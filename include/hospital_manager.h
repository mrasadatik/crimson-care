/*!
 * @file hospital_manager.h
 *
 * @brief Hospital manager header file
 * @details This file contains the declarations of the functions and structures for the hospital manager module.
 *
 * @author CrimsonCare Team
 * @date 2025-01-18
 *
 * @copyright
 * Copyright (c) 2025 CrimsonCare Team
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#ifndef HOSPITAL_MANAGER_H
#define HOSPITAL_MANAGER_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <stdbool.h>
#include <errno.h>

#include "admin_manager.h"

#define MAX_HOSPITAL_NAME_LENGTH 100
#define MAX_HOSPITAL_LOCATION_LENGTH 100
#define MAX_HOSPITAL_CODE_LENGTH 8

 /*!
  * @brief Hospital structure
  * @details This structure represents a hospital in the system.
  */
typedef struct Hospital {
    char name[MAX_HOSPITAL_NAME_LENGTH]; /*!< Hospital name */
    char location[MAX_HOSPITAL_LOCATION_LENGTH]; /*!< Hospital location */
    char code[MAX_HOSPITAL_CODE_LENGTH]; /*!< Hospital code */
    struct Hospital* next; /*!< Next hospital */
} Hospital;

/*!
 * @name loadHospitals
 * @brief Load hospitals from file
 * @details This function loads the hospitals from the file `resources/db/hospitals.txt`
 * and stores it in the `hospitalHead` linkedlist.
 *
 * @note The file path 'resources/db' is relative to the project root directory.
 * Make sure that the folder exists also to run the program from the root directory.
 *
 * @post If the file is not found, the function does nothing. Otherwise, the hospitals
 * are loaded from the file and stored in the `hospitalHead` linkedlist.
 *
 * @exception fopen() - If the file cannot be opened, an error message is displayed,
 * also the function frees the `hospitalHead` linkedlist.
 * @exception malloc() - If memory allocation fails, an error message is displayed,
 * also the function frees the `hospitalHead` linkedlist.
 */
void loadHospitals(void);

/*!
 * @name saveHospitals
 * @brief Save hospitals to file
 * @details This function saves the hospitals to the file `resources/db/hospitals.txt`.
 *
 * @note The file path 'resources/db' is relative to the project root directory.
 * Make sure that the folder exists also to run the program from the root directory.
 *
 * @post The hospitals from the `hospitalHead` linkedlist are saved to the file.
 *
 * @exception fopen() - If the file cannot be opened, an error message is displayed.
 */
void saveHospitals(void);

/*!
 * @name addHospital
 * @brief Add hospital
 * @details This function adds a new hospital to the `hospitalHead` linkedlist.
 *
 * @param[in] name Hospital name
 * @param[in] location Hospital location
 *
 * @return Hospital code or NULL if hospital is not added
 *
 * @note The hospital code is generated by taking the maximum of the first three
 * characters of the hospital name and appending a random number between 0000 and 9999.
 *
 * @pre @p name is not empty
 * @pre @p location is not empty
 * @post The hospital is added to the `hospitalHead` linkedlist.
 *
 * @exception If the @p name is empty or @p location is empty, an error message is displayed.
 * @exception malloc() - If the memory allocation for the new hospital fails, an error message is displayed.
 */
char* addHospital(const char* name, const char* location);

/*!
 * @name validateHospitalCode
 * @brief Validate hospital code
 * @details This function validates the given hospital code by
 * traversing the `hospitalHead` linkedlist.
 *
 * @param[in] code Hospital code
 *
 * @return True if hospital code is valid, False otherwise
 *
 * @pre @p code is not empty
 * @post If the @p code is found in the `hospitalHead` linkedlist,
 * the function returns true. Otherwise, it returns false.
 *
 * @exception If the @p code is empty, an error message is displayed.
 */
bool validateHospitalCode(const char* code);

/*!
 * @name deleteHospital
 * @brief Delete hospital
 * @details This function deletes the hospital with the given code
 * by traversing the `hospitalHead` linkedlist.
 *
 * @param[in] code Hospital code
 * @param[in] adminUsername Admin username
 * @param[in] adminPassword Admin password
 *
 * @return True if hospital is deleted, False otherwise
 *
 * @pre @p code is not empty
 * @pre @p adminUsername is not empty
 * @pre @p adminPassword is not empty
 * @post The hospital with the given code is deleted from the `hospitalHead` linkedlist.
 *
 * @exception If the @p code is empty, an error message is displayed.
 * @exception If the @p adminUsername is empty or @p adminPassword is empty, an error message is displayed.
 * @exception If the pair of @p adminUsername and @p adminPassword is invalid, an error message is displayed.
 * @exception If the hospital with the given code is not found, an error message is displayed.
 */
bool deleteHospital(const char* code, const char* adminUsername, const char* adminPassword);

/*!
 * @name getHospitalNameByCode
 * @brief Get hospital name by code
 * @details This function gets the hospital name by the given code
 * by traversing the `hospitalHead` linkedlist.
 *
 * @param[in] code Hospital code
 *
 * @return Hospital name or NULL if not found
 *
 * @pre @p code is not empty and valid
 * @post If the @p code is found in the `hospitalHead` linkedlist,
 * the function returns the hospital name. Otherwise, it returns NULL.
 *
 * @exception If the @p code is empty, an error message is displayed.
 * @exception If the @p code is invalid, an error message is displayed.
 */
char* getHospitalNameByCode(const char* code);

/*!
 * @name displayHospitals
 * @brief Display all hospitals
 * @details This function displays all the hospitals
 * in the `hospitalHead` linkedlist by traversing it.
 *
 * @post The hospitals in the `hospitalHead` linkedlist are displayed in a formatted manner.
 */
void displayHospitals(void);

/*!
 * @name freeHospital
 * @brief Free hospital list from memory
 * @details This function frees the `hospitalHead` linkedlist
 * from memory by traversing it.
 *
 * @post The `hospitalHead` linkedlist is freed from memory.
 */
void freeHospital(void);

#endif
